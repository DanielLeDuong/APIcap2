{"version":3,"sources":["authController.js"],"names":["RegisterModel","require","jwt","authController","register","req","res","username","body","password","confirmPassword","email","newUser","save","user","status","json","login","findOne","accessToken","sign","id","role","expiresIn","refreshToken","cookie","httpOnly","secure","path","sameSite","_doc","others","message","requestRefreshToken","reqRefreshToken","logout","clearCookie","module","exports"],"mappings":"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","sourcesContent":["const RegisterModel = require('../ApiUser/Register')\r\nconst jwt = require('jsonwebtoken')\r\n\r\n\r\nconst authController = {\r\n    //register\r\n    register: async (req,res) => {\r\n        try {\r\n            const newUser = await new RegisterModel({\r\n                username: req.body.username,\r\n                password: req.body.password,\r\n                confirmPassword: req.body.confirmPassword,\r\n                email: req.body.email\r\n            })\r\n\r\n            const user = await newUser.save()\r\n            res.status(200).json(user)\r\n        } catch (error) {\r\n            res.status(500).json(error)\r\n        }\r\n    },\r\n    //login\r\n    login: async (req,res) => {\r\n        try {\r\n            const user = await RegisterModel.findOne({username: req.body.username})\r\n            if(user) {\r\n                if(user.password === req.body.password){\r\n                    \r\n                    // access token\r\n                    const accessToken = jwt.sign({\r\n                        id: user.id,\r\n                        role: user.role \r\n                    },\r\n                    \"accessKey\",\r\n                    {expiresIn:'1200s'}\r\n                    )\r\n                    // refresh token\r\n                    const refreshToken = jwt.sign({\r\n                        id: user.id,\r\n                        role: user.role \r\n                    },\r\n                    \"refreshKey\",\r\n                    {expiresIn:'6d'}\r\n                    )\r\n\r\n\r\n                    //luu token vao cookies\r\n                    res.cookie(\"refreshToken\",refreshToken, {\r\n                        httpOnly: true,\r\n                        secure: false,\r\n                        path: '/',\r\n                        sameSite: 'strict'\r\n                    })\r\n                    //neu muon loai password khi xuat thong tin thi lam theo cach sau\r\n                    const {password,confirmPassword, ...others} = user._doc\r\n                    res.status(200).json({...others, accessToken})\r\n                    \r\n                } else {\r\n                    const message = res.json(\"The password is incorrect\")\r\n                }\r\n            } else {\r\n                const message = res.json('No existed username')\r\n            }\r\n            \r\n\r\n        } catch (error) {\r\n            res.status(500).json(error)\r\n        }\r\n    },\r\n\r\n    //refresh token\r\n    requestRefreshToken: async(req,res) => {\r\n        const reqRefreshToken = req.cookie.refreshToken   \r\n\r\n    },\r\n\r\n    //log out\r\n    logout : async (req,res) => {\r\n        res.clearCookie(\"refreshToken\")\r\n        res.status(200).json(\"Log out successfully\")\r\n    }\r\n}\r\n\r\n//luu tru token\r\n\r\nmodule.exports = authController"],"file":"authController.dev.js"}