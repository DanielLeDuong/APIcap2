{"version":3,"sources":["authController.js"],"names":["RegisterModel","require","jwt","authController","register","req","res","newUser","user","regeneratorRuntime","async","_context","prev","next","awrap","username","body","password","confirmPassword","email","sent","save","json","t0","status","stop","login","accessToken","refreshToken","_user$_doc","others","_context2","findOne","id","role","expiresIn","sign","cookie","httpOnly","secure","path","sameSite","_doc","_objectSpread","_context3"],"mappings":"8qCAAA,IAAMA,cAAgBC,QAAQ,uBACxBC,IAAMD,QAAQ,gBAGdE,eAAiB,CAEnBC,SAAU,SAAOC,EAAIC,GAAX,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAEoB,IAAId,cAAc,CACpCe,SAAUV,EAAIW,KAAKD,SACnBE,SAAUZ,EAAIW,KAAKC,SACnBC,gBAAiBb,EAAIW,KAAKE,gBAXpClB,MAAgBC,EAAOe,KAACG,SAMhB,KAAA,EAAA,OAEIZ,EAFJI,EAAAS,KAAAT,EAAAE,KAAA,EAAAJ,mBAAAK,MASiBP,EAAQc,QATzB,KAAA,EASIb,EATJG,EAAAS,KAFRjB,EAAAA,OAAiB,KAAAmB,KAAAd,GAETG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,MAAA,GAAAL,EAAAkB,OAAA,KAAAF,KAAAX,EAAAY,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAZ,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,MAAA,SAAArB,EAAAC,GAAA,IAAAE,EAAAmB,EAAAC,EAAAC,EAAAC,EAAA,OAAArB,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,OAAAkB,EAAAnB,KAAA,EAAAmB,EAAAlB,KAAA,EAAAJ,mBAAAK,MAAAd,cAAAgC,QAAA,CAAAjB,SAAAV,EAAAW,KAAAD,YAAA,KAAA,GAAAP,EAAAuB,EAAAX,MAAAZ,EAAAS,WAAAZ,EAAAW,KAEoBC,UAGlBC,EAA0BA,IAAAA,KAAAA,CAChBe,GAACjB,EAAKG,GANlBe,KAAA1B,EAAA0B,MAAA,YAAA,CAAAC,UAAA,UA+BYP,EAAe1B,IAAIkC,KAAK,CA/BpCH,GAAAzB,EAAAyB,GAAAC,KAAA1B,EAAA0B,MAAA,aAAA,CAAAC,UAAA,OAYEX,EAAOa,OAAKf,eAAhBM,EAAA,CA8BYU,UAAU,EA1CpBC,QAAA,EAAAC,KAAA,IAAAC,SAAA,WAEwBzC,EAFxBQ,EAAAkC,KAEwB1C,EAFxBiB,SAEwBjB,EAFxBkB,gBAAAY,EAEwB9B,yBAAAA,EAAAA,CAAAA,WAAAA,oBAJfM,EAAAkB,OAAA,KAAAF,KAAAqB,cAAA,GAAAb,EAAA,CAAAH,YAAAA,MAkBZrB,EAAAgB,KAAA,6BAAAhB,EAAAgB,KAAA,uBAhBGS,EAAAlB,KAAA,GAAA,MAAA,KAAA,EAAAkB,EAAAnB,KAAA,EAAAmB,EAAAR,GAAAQ,EAAA,MAAA,GAgBHzB,EAAAkB,OAAA,KAAAF,KAAAS,EAAAR,IAhBG,KAAA,GAAA,IAAA,MAAA,OAAAQ,EAAAN,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAkBIjB,oBAFP,SAAAH,GAAA,OAAAI,mBAAAC,MAAA,SAAAkC,GAAA,OAAA,OAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,KAAA,EAkDqBR,EAAIgC,OAAOT,aAlDhC,KAAA,EAAA,IAAA,MAAA,OAAAgB,EAAAnB,WAQaQ,OAAAA,SAAE5B,EAAEG,GAAJyB,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EACAC,EAAAA,YAAM1B,gBAFmBF,EAAAkB,OAI7B,KAAAF,KAAA,wBAHIW,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,YASAC,OAAAA,QAAAA","file":"authController.min.js","sourcesContent":["const RegisterModel = require('../ApiUser/Register')\r\nconst jwt = require('jsonwebtoken')\r\n\r\n\r\nconst authController = {\r\n    //register\r\n    register: async (req,res) => {\r\n        try {\r\n            const newUser = await new RegisterModel({\r\n                username: req.body.username,\r\n                password: req.body.password,\r\n                confirmPassword: req.body.confirmPassword,\r\n                email: req.body.email\r\n            })\r\n\r\n            const user = await newUser.save()\r\n            res.status(200).json(user)\r\n        } catch (error) {\r\n            res.status(500).json(error)\r\n        }\r\n    },\r\n    //login\r\n    login: async (req,res) => {\r\n        try {\r\n            const user = await RegisterModel.findOne({username: req.body.username})\r\n            if(user) {\r\n                if(user.password === req.body.password){\r\n                    \r\n                    // access token\r\n                    const accessToken = jwt.sign({\r\n                        id: user.id,\r\n                        role: user.role \r\n                    },\r\n                    \"accessKey\",\r\n                    {expiresIn:'1200s'}\r\n                    )\r\n                    // refresh token\r\n                    const refreshToken = jwt.sign({\r\n                        id: user.id,\r\n                        role: user.role \r\n                    },\r\n                    \"refreshKey\",\r\n                    {expiresIn:'6d'}\r\n                    )\r\n\r\n\r\n                    //luu token vao cookies\r\n                    res.cookie(\"refreshToken\",refreshToken, {\r\n                        httpOnly: true,\r\n                        secure: false,\r\n                        path: '/',\r\n                        sameSite: 'strict'\r\n                    })\r\n                    //neu muon loai password khi xuat thong tin thi lam theo cach sau\r\n                    const {password,confirmPassword, ...others} = user._doc\r\n                    res.status(200).json({...others, accessToken})\r\n                    \r\n                } else {\r\n                    const message = res.json(\"The password is incorrect\")\r\n                }\r\n            } else {\r\n                const message = res.json('No existed username')\r\n            }\r\n            \r\n\r\n        } catch (error) {\r\n            res.status(500).json(error)\r\n        }\r\n    },\r\n\r\n    //refresh token\r\n    requestRefreshToken: async(req,res) => {\r\n        const reqRefreshToken = req.cookie.refreshToken   \r\n\r\n    },\r\n\r\n    //log out\r\n    logout : async (req,res) => {\r\n        res.clearCookie(\"refreshToken\")\r\n        res.status(200).json(\"Log out successfully\")\r\n    }\r\n}\r\n\r\n//luu tru token\r\n\r\nmodule.exports = authController"]}