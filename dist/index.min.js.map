{"version":3,"sources":["index.js"],"names":["express","require","mongoose","cors","RegisterModel","cookieParser","authRoute","userRoute","app","use","json","connect","req","res","create","body","then","regis","err","_req$body","username","user","console","log","password","findOne","_req$body2","_id","rest","data","regeneratorRuntime","async","_context","prev","next","_objectWithoutProperties","awrap","updateOne","sent","success","message","stop","id","_context2","params","deleteOne","send","listen"],"mappings":"mdAGA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YACnBE,KAAOF,QAAQ,QALrBG,cAAAH,QAAA,sBACAI,aAAAJ,QAAA,iBAQMK,UAAYL,QAAQ,iBALpBC,IAAQF,UASRO,UAAYN,QAAQ,iBAE1BO,IAAIC,IAAIT,QAAQU,QARhBF,IAAMH,IAAAA,QAUNG,IAAIC,IAAIJ,gBAGRH,SAASS,QAAQ,wGALjBH,IAAIC,KAAIT,YAAA,SAARY,EAAAC,GACIJ,cAAJK,OAAAF,EAAAG,MAYKC,KAAK,SAAAC,GAAK,OAAIJ,EAAIH,KAAKO,KAZxBR,MAIKE,SAAAA,GAAAA,OAAQE,EAAAH,KAAAQ,OAMbd,IAAAA,KAAAA,SAAcU,SAAAA,EAAOF,GAArB,IAAAO,EAEWP,EAAAG,KAAIF,EAFfM,EAEeN,SAASI,EAFxBE,EAEwBF,SACdb,cAAQM,QAAR,CAAAU,SAAAA,IAHVJ,KAAA,SAAAK,GADJC,QAAAC,IAAAF,GAOSA,EAAuBA,EACAT,WADAY,EAAAX,EAAAH,KAAA,WAGde,EAAdf,KAAsB,6BAAWU,EAAAA,KAAAA,kBAKrBP,IAAAA,IAAAA,UAAS,SAATD,EAAAC,GAAS,IAAAa,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAR,EAERd,EAAAG,KAHLY,EACaD,EADbC,IAGKC,EAFQO,yBAAAT,EAAA,CAAA,QAEgCJ,QAAAC,IAAAK,GAFhCI,EAAAE,KAAA,EAAAJ,mBAAAM,MAGVhC,cAAAiC,UAAA,CAAAV,IAAAA,GAAAC,IAHU,KAAA,EAFjBC,EAEiBG,EAAAM,KAGTzB,EAAAA,KAAIH,CAAJ6B,SAAS,EAATC,QAAA,qBAAAX,KAAAA,IAHS,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAS,YAkBzBjC,IAAG,OAAQ,cAAe,SAAOI,EAAIC,GAAX,IAAA6B,EAAAb,EAAA,OAAAC,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,OATlBQ,EAAA9B,EAAWgC,OAAAF,GASOC,EAAAT,KAAA,EAAAJ,mBAAAM,MATPhC,cAAAyC,UAAA,CAAAlB,IAAAe,KASO,KAAA,EATPb,EASOc,EAAAL,KAGtBzB,EAAIiC,KAAK,CAACP,SAAS,EAAMC,QAAQ,qBAAsBX,KAAMA,IAHvC,KAAA,EAAA,IAAA,MAAA,OAAAc,EAAAF,YATPjC,IAAAC,IAAA,WAAAH,WAAAE,IAAAC,IAAA,WAAAF,WAAAC,IAAAuC,OAAA,KAAA,WAAAzB,QAAAC,IAAA","file":"index.min.js","sourcesContent":["//WF3Xhi73BH6dXiOr\r\n//mavoiem\r\n\r\nconst express = require('express')\r\nconst mongoose = require('mongoose')\r\nconst cors = require('cors')\r\nconst RegisterModel = require('./ApiUser/Register')\r\nconst cookieParser = require('cookie-parser')\r\n//post\r\nconst authRoute = require('./routes/auth')\r\nconst app = express()\r\n\r\n//get\r\nconst userRoute = require('./routes/user')\r\n\r\napp.use(express.json())\r\napp.use(cors())\r\napp.use(cookieParser())\r\n\r\n//connect\r\nmongoose.connect('mongodb+srv://mavoiem:WF3Xhi73BH6dXiOr@cap2api.evksd.mongodb.net/Cap2API?retryWrites=true&w=majority')\r\n\r\n\r\n//authentication\r\n\r\napp.post('/register',(req,res) =>{\r\n    RegisterModel.create(req.body)\r\n\r\n    .then(regis => res.json(regis))\r\n    .catch(err => res.json(err))\r\n})\r\n\r\napp.post('/login', (req,res) => {\r\n    const {username,password} = req.body\r\n\r\n    RegisterModel.findOne({username: username})\r\n    .then(user => {\r\n        console.log(user);\r\n        if(user){\r\n            if(user.password === password){\r\n                res.json(\"Success\")\r\n            } \r\n            else { res.json(\"the password is incorrect\")}\r\n        } else {res.json('No existed')}\r\n    })\r\n})\r\n\r\n\r\n//update\r\napp.put('/update', async (req,res) => {\r\n    const {_id, ...rest} = req.body\r\n\r\n    console.log(rest)\r\n    const data = await RegisterModel.updateOne({_id: _id}, rest)\r\n    res.send({success: true, message:\"update successfull\", data: data})\r\n})\r\n\r\n//delete\r\napp.delete('/delete/:id', async (req,res) => {\r\n    const id = req.params.id\r\n    const data = await RegisterModel.deleteOne({_id: id})\r\n    res.send({success: true, message:\"delete successfull\", data: data})\r\n})\r\n\r\n//Route\r\napp.use('/v1/auth', authRoute)\r\napp.use('/v1/user', userRoute)\r\n\r\napp.listen(3001, () => {\r\n    console.log(\"server is running\")\r\n})"]}